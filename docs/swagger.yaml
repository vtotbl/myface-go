basePath: /
definitions:
  request.ChangePhoto:
    properties:
      base64:
        type: string
      photo_id:
        type: string
    required:
    - base64
    - photo_id
    type: object
  request.DeletePhoto:
    properties:
      photo_id:
        type: integer
    required:
    - photo_id
    type: object
  request.Refresh:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  request.SetRatingInput:
    properties:
      photo_id:
        type: integer
      rating:
        type: number
    required:
    - photo_id
    - rating
    type: object
  request.SignIn:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  request.SignUp:
    properties:
      login:
        type: string
      password:
        type: string
      sex:
        type: string
    required:
    - login
    - password
    - sex
    type: object
  request.Upload:
    properties:
      base64:
        type: string
    required:
    - base64
    type: object
  response.Error:
    properties:
      error:
        type: string
    required:
    - error
    type: object
  response.GetPhoto:
    properties:
      base64:
        type: string
      photo_id:
        type: string
    required:
    - base64
    - photo_id
    type: object
  response.Message:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  response.Photo:
    properties:
      photo_id:
        type: string
    required:
    - photo_id
    type: object
  response.Tokens:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - access_token
    - refresh_token
    type: object
host: localhost:8080
info:
  contact: {}
  description: API server for myface application
  title: Todo App API
  version: "1.0"
paths:
  /api/v1/photo:
    delete:
      consumes:
      - application/json
      description: Delete photo by id
      operationId: deletePhoto
      parameters:
      - description: Id photo to delete
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.DeletePhoto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: delete
      tags:
      - photo
    get:
      consumes:
      - application/json
      description: Get photo by id or get all photos for current user. If the id of
        the photo is specified, then the model will be returned. If id is not specified
        then will return an array of models
      operationId: get-photo
      parameters:
      - description: Photo ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetPhoto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: get photo
      tags:
      - photo
    post:
      consumes:
      - application/json
      description: Upload photo to server
      operationId: upload
      parameters:
      - description: Base64 encoded photo
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.Upload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Photo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: upload
      tags:
      - photo
    put:
      consumes:
      - application/json
      description: Change photo by id
      operationId: change
      parameters:
      - description: Base64 encoded photo and photo_id
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ChangePhoto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Photo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: change
      tags:
      - photo
  /api/v1/photo/random:
    get:
      consumes:
      - application/json
      description: Get a random photo where the rating isn't worth
      operationId: get-random-photo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetPhoto'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: get random photo
      tags:
      - photo
  /api/v1/rating:
    post:
      consumes:
      - application/json
      description: Set rating for photo
      operationId: set-rating
      parameters:
      - description: Rating from 1 to 10 and photo ID
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.SetRatingInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: set-rating
      tags:
      - rating
  /auth/v1/log-out:
    post:
      consumes:
      - application/json
      description: Log out
      operationId: log-out
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKeyAuth: []
      summary: log-out
      tags:
      - auth
  /auth/v1/refresh:
    post:
      consumes:
      - application/json
      description: Refresh tokens
      operationId: refresh
      parameters:
      - description: refresh token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.Refresh'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: refresh
      tags:
      - auth
  /auth/v1/sign-in:
    post:
      consumes:
      - application/json
      description: Log in with an existing account
      operationId: sign-in
      parameters:
      - description: login and password from the account
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.SignIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: sign-in
      tags:
      - auth
  /auth/v1/sign-up:
    post:
      consumes:
      - application/json
      description: Create new account
      operationId: sign-up
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.SignUp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: sign-up
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
